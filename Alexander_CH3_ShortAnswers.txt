Chapter 3: Functions, Header Files, & Makefiles, Short Answer Questions (2, 3, 4, 6, 8) -

2.) What is the difference between a function declaration and a function definition?

    Answer: Function declarations are for the compiler to recognize if a function 
            exists, what its arguments are, and its return type. Function definitions 
            are then created afterwards by writing the code to be executed.

3.) Why does C/C++ need to have function declarations? Why doesn't Java have them?
    
    Answer: C/C++ need to have function declarations because the compiler only makes a 
            single pass through the code, so if a function is trying to be used before
            it is declared the compiler will not recognize it. Java does not have this 
            issue because the compiler makes two passes through the code to ensure 
            that the methods being called match existing methods.

4.) What is the C preprocessor, and what does it do?

     Answer: The C preprocessor is a program that executes text manipulations based on
             the requested directive. Using a directive will allow the preprocessor
             to include functions within the code that is attempting to be compiled 
             and executed.

6.) What is wrong with the following:
    
    g++ -c thing.h

     Answer: The code above is attempting to compile a header file. Header files should 
             already be included within the .cc files so they get compiled together.

8.) Suppose you have the following:

    #define MAX_VALUE 32767

    Is MAX_VALUE a variable? If not, what is it?

     Answer: In the code above MAX_VALUE is a preprocessor macro that will ensure every 
             instance of MAX_VALUE is replaced with 32767 prior to compiling. Since the
             compiler will not see MAX_VALUE it is not considered a variable.